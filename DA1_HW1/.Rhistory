Close_P3_Acc_ETH_Value <- (Open_P3_Acc_ETH_Value * ETH_Sept)
print((Close_P3_Acc_ETH_Value))
print(ETH_Dec)
print(ETH_Sept)
#25% DASH
Open_P3_Acc_DASH_Value <- (2500 / DASH_Dec)
Close_P3_Acc_DASH_Value <- (Open_P3_Acc_DASH_Value * DASH_Sept)
print((Close_P3_Acc_DASH_Value))
#25% PPC
Open_P3_Acc_PPC_Value <- (2500 / PPC_Dec)
Close_P3_Acc_PPC_Value <- (Open_P3_Acc_PPC_Value * PPC_Sept)
print((Close_P3_Acc_PPC_Value))
print(PPC_Dec)
print(PPC_Sept)
#25% XLM.
Open_P3_Acc_XLM_Value <- (2500 / XLM_Dec)
Close_P3_Acc_XLM_Value <- (Open_P3_Acc_XLM_Value * XLM_Sept)
print((Close_P3_Acc_XLM_Value))
print(XLM_Dec)
print(XLM_Sept)
Portfolio_3_value <- Close_P3_Acc_XLM_Value + Close_P3_Acc_PPC_Value + Close_P3_Acc_DASH_Value + Close_P3_Acc_ETH_Value
print(Portfolio_3_value)
BTC_dates_2b <- BTC.charts$date[BTC.charts$date > as.Date("2017-11-30")]
BTC_close_2b <- BTC.charts$close[BTC.charts$date > as.Date("2017-11-30")]
print(BTC_close_2b)
length(BTC_close_2b)
BTC_df <- data.frame(date2b = BTC_dates_2b, close2b = BTC_close_2b)
BTC_df
qplot(x=date2b, y=close2b, data=BTC_df)
XRP_date = subset(XRP.charts$date, XRP.charts$date>as.Date("2017-11-30"))
XRP_close = subset(XRP.charts$close, XRP.charts$date>as.Date("2017-11-30"))
XRP_2b <- data.frame(XRP_date_df = XRP_date, XRP_close_df = XRP_close, XRP_Return = ((5000 / XRP_Dec) *XRP_close))
print(XRP_2b)
LTC_date = subset(LTC.charts$date, LTC.charts$date>as.Date("2017-11-30"))
LTC_close = subset(LTC.charts$close, LTC.charts$date>as.Date("2017-11-30"))
LTC_2b <- data.frame(LTC_date_df = LTC_date, LTC_close_df = LTC_close, LTC_Return = ((5000 / LTC_Dec) *LTC_close))
Portfolio2Merged <- data.frame(XRP_Cash = ((5000 / XRP_Dec) * XRP_2b$XRP_close), XRP_Close = XRP_2b$XRP_close,  XRP_Date = XRP_2b$XRP_date,
LTC_Cash = ((5000 / LTC_Dec )* LTC_2b$LTC_close), LTC_Date = LTC_2b$LTC_date,
Total_Return = XRP_2b$XRP_Return + LTC_2b$LTC_Return)
qplot(x=XRP_2b$XRP_date, y=Total_Return, data=Portfolio2Merged)
ETH_date = subset(ETH.charts$date, ETH.charts$date>as.Date("2017-11-30"))
ETH_close = subset(ETH.charts$close, ETH.charts$date>as.Date("2017-11-30"))
ETH_2b <- data.frame(ETH_date_df = ETH_date, ETH_close_df = ETH_close, ETH_Return = ((2500 / ETH_Dec) *ETH_close))
print(ETH_2b)
DASH_date = subset(DASH.charts$date, DASH.charts$date>as.Date("2017-11-30"))
DASH_close = subset(DASH.charts$close, DASH.charts$date>as.Date("2017-11-30"))
DASH_Dec2 <- DASH.charts$close[ which(DASH.charts$date == '2017-12-01')]
print(DASH_Dec)
DASH_2b <- data.frame(DASH_date_df = DASH_date, DASH_close_df = DASH_close,
DASH_Return = ((2500 / DASH_Dec2) *DASH_close))
print(DASH_2b)
PPC_date = subset(PPC.charts$date, PPC.charts$date>as.Date("2017-11-30"))
PPC_close = subset(PPC.charts$close, PPC.charts$date>as.Date("2017-11-30"))
PPC_2b <- data.frame(PPC_date_df = PPC_date, PPC_close_df = PPC_close, PPC_Return = ((2500 / PPC_Dec) *PPC_close))
print(PPC_2b)
XLM_date = subset(XLM.charts$date, XLM.charts$date>as.Date("2017-11-30"))
XLM_close = subset(XLM.charts$close, XLM.charts$date>as.Date("2017-11-30"))
XLM_2b <- data.frame(XLM_date_df = XLM_date, XLM_close_df = XLM_close, XLM_Return = ((2500 / XLM_Dec) *XLM_close))
print(XLM_2b)
Portfolio2Merged <- data.frame(ETH_Cash = ((2500 / ETH_Dec) * ETH_2b$ETH_close), ETH_Close = ETH_2b$ETH_close,  ETH_Date = ETH_2b$ETH_date,
DASH_Cash = ((2500 / DASH_Dec2 )* DASH_2b$DASH_close), DASH_Date = DASH_2b$DASH_date,
PPC_Cash = ((2500 / PPC_Dec) * PPC_2b$PPC_close),
PPC_Close = PPC_2b$PPC_close,  PPC_Date = PPC_2b$PPC_date,
XLM_Cash = ((2500 / XLM_Dec )* XLM_2b$XLM_close), XLM_Date = XLM_2b$XLM_date,
Total_Return = ETH_2b$ETH_Return + DASH_2b$DASH_Return)
qplot(x=ETH_2b$ETH_date, y=Total_Return, data=Portfolio2Merged)
#port 2 vs prt 1 Daily return
XRP_Raw_Close <-  subset(XRP.charts$close, XRP.charts$date>as.Date("2017-11-30"))
XRP_Raw_Date <-  subset(XRP.charts$date, XRP.charts$date>as.Date("2017-11-30"))
LTC_Raw_Close <-  subset(LTC.charts$close, LTC.charts$date>as.Date("2017-11-30"))
LTC_Raw_Date <-  subset(LTC.charts$date, LTC.charts$date>as.Date("2017-11-30"))
P2_Mixed <-  (5000/XRP_Dec * XRP_Raw_Close) + (5000/LTC_Dec * LTC_Raw_Close)
print(P2_Mixed)
P2_Mixed_Today <- P2_Mixed[2:N]
print(P2_Mixed_Today)
P2_yesterdays_price <- P2_Mixed[1 : N - 1]
print(P2_yesterdays_price)
P2_Daily_return <- ((P2_Mixed_Today - P2_yesterdays_price)/P2_yesterdays_price)
print(P2_Daily_return)
P2DF <- data.frame(P2 = P2_Daily_return, BTCDRT = BTC_daily_return)
corP2 <- cor(P2DF$P2, P2DF$BTCDRT)
print(corP2)
# Portfolio 3: 25% ETH, 25% DASH, 25% PPC, and 25% XLM.
ETH_Raw_Close <-  subset(ETH.charts$close, ETH.charts$date>as.Date("2017-11-30"))
ETH_Raw_Date <-  subset(ETH.charts$date, ETH.charts$date>as.Date("2017-11-30"))
DASH_Raw_Close <-  subset(DASH.charts$close, DASH.charts$date>as.Date("2017-11-30"))
DASH_Raw_Date <-  subset(DASH.charts$date, DASH.charts$date>as.Date("2017-11-30"))
XLM_Raw_Close <-  subset(XLM.charts$close, XLM.charts$date>as.Date("2017-11-30"))
XLM_Raw_Date <-  subset(XLM.charts$date, XLM.charts$date>as.Date("2017-11-30"))
PPC_Raw_Close <-  subset(PPC.charts$close, PPC.charts$date>as.Date("2017-11-30"))
PPC_Raw_Date <-  subset(PPC.charts$date, PPC.charts$date>as.Date("2017-11-30"))
P3_Mixed <-  (2500/ETH_Dec * ETH_Raw_Close) + (2500/PPC_Dec * PPC_Raw_Close) + (2500/XLM_Dec * XLM_Raw_Close) + (2500/DASH_Dec * DASH_Raw_Close)
print(P3_Mixed)
P3_Mixed_Today <- P3_Mixed[2:N]
print(P3_Mixed_Today)
P3_yesterdays_price <- P3_Mixed[1 : N - 1]
print(P3_yesterdays_price)
P3_Daily_return <- ((P3_Mixed_Today - P3_yesterdays_price)/P3_yesterdays_price)
print(P3_Daily_return)
P3DF <- data.frame(P3 = P3_Daily_return, BTCDRT = BTC_daily_return)
corP3 <- cor(P3DF$P3, P3DF$BTCDRT)
print(corP3)
#2d
#Portfolio 1
# Portfolio 1: 100% BTC;
#volatility is SD of daily returns
BTC2d <-  subset(BTC.charts, BTC.charts$date>as.Date("2017-11-30") & BTC.charts$date< as.Date("2020-01-01"))
print(BTC2d)
BTCN2D <- nrow(BTC2d)
print(BTCN2D)
BTC2D_Today <- BTC2d$close[2:BTCN2D]
BTC2D_Yesterday <- BTC2d$close[1:BTCN2D - 1]
BTC2D_DRT <-  ((BTC2D_Today - BTC2D_Yesterday)/ BTC2D_Yesterday)
BTC_Volatility <-  sd(BTC2D_DRT)
print(BTC_Volatility)
BTC_dates_2b <- BTC.charts$date[BTC.charts$date > as.Date("2017-11-30")]
BTC_close_2b <- BTC.charts$close[BTC.charts$date > as.Date("2017-11-30")]
print(BTC_close_2b)
length(BTC_close_2b)
BTC_df <- data.frame(date2b = BTC_dates_2b, close2b = BTC_close_2b)
BTC_df
qplot(x=date2b, y=close2b, data=BTC_df)
XRP_date = subset(XRP.charts$date, XRP.charts$date>as.Date("2017-11-30"))
XRP_close = subset(XRP.charts$close, XRP.charts$date>as.Date("2017-11-30"))
XRP_2b <- data.frame(XRP_date_df = XRP_date, XRP_close_df = XRP_close, XRP_Return = ((5000 / XRP_Dec) *XRP_close))
print(XRP_2b)
LTC_date = subset(LTC.charts$date, LTC.charts$date>as.Date("2017-11-30"))
LTC_close = subset(LTC.charts$close, LTC.charts$date>as.Date("2017-11-30"))
LTC_2b <- data.frame(LTC_date_df = LTC_date, LTC_close_df = LTC_close, LTC_Return = ((5000 / LTC_Dec) *LTC_close))
Portfolio2Merged <- data.frame(XRP_Cash = ((5000 / XRP_Dec) * XRP_2b$XRP_close), XRP_Close = XRP_2b$XRP_close,  XRP_Date = XRP_2b$XRP_date,
LTC_Cash = ((5000 / LTC_Dec )* LTC_2b$LTC_close), LTC_Date = LTC_2b$LTC_date,
Total_Return = XRP_2b$XRP_Return + LTC_2b$LTC_Return)
qplot(x=XRP_2b$XRP_date, y=Total_Return, data=Portfolio2Merged)
View(Portfolio2Merged)
BTC_3N <- BTC.charts %>% filter(date > as.Date("2017-11-30") & date < as.Date("2022-09-02"))
N3 <- nrow(BTC_3N)
BTC_Avg <- data.frame(Average = (BTC_3N$high + BTC_3N$low) /2)
BTC_Avg_Today <-   BTC_Avg$Average[2:N3]
BTC_Avg_yesterday <- BTC_Avg$Average[1 : N3 - 1]
BTC_daily_return_3 <- ((BTC_Avg_Today - BTC_Avg_yesterday) / BTC_Avg_yesterday)
mean(BTC_daily_return_3)
XRP_3N <- XRP.charts %>% filter(date > as.Date("2017-11-30") & date < as.Date("2022-09-02"))
N3 <- nrow(XRP_3N)
XRP_Avg <- data.frame(Average = (XRP_3N$high + XRP_3N$low) /2)
XRP_Avg_Today <-   XRP_Avg$Average[2:N3]
XRP_Avg_yesterday <- XRP_Avg$Average[1 : N3 - 1]
XRP_daily_return_3 <- ((XRP_Avg_Today - XRP_Avg_yesterday) / XRP_Avg_yesterday)
mean(XRP_daily_return_3)
LTC_3N <- LTC.charts %>% filter(date > as.Date("2017-11-30") & date < as.Date("2022-09-02"))
N3 <- nrow(LTC_3N)
LTC_Avg <- data.frame(Average = (LTC_3N$high + LTC_3N$low) /2)
LTC_Avg_Today <-   LTC_Avg$Average[2:N3]
LTC_Avg_yesterday <- LTC_Avg$Average[1 : N3 - 1]
LTC_daily_return_3 <- ((LTC_Avg_Today - LTC_Avg_yesterday) / LTC_Avg_yesterday)
mean(LTC_daily_return_3)
P2_3_Avg <- data.frame(Average = XRP_Avg + LTC_Avg)
P2_3_Today <-   P2_3_Avg$Average[2:N3]
P2_3_yesterday <- P2_3_Avg$Average[1 : N3 - 1]
P2_3_ROI <- ((P2_3_Today - P2_3_yesterday) / P2_3_yesterday)
mean(P2_3_ROI)
ETH_3N <- ETH.charts %>% filter(date > as.Date("2017-11-30") & date < as.Date("2022-09-02"))
N3 <- nrow(ETH_3N)
ETH_Avg <- data.frame(Average = (ETH_3N$high - ETH_3N$low) /2)
ETH_Avg_Today <-   ETH_Avg$Average[2:N3]
ETH_Avg_yesterday <- ETH_Avg$Average[1 : N3 - 1]
ETH_daily_return_3 <- ((ETH_Avg_Today - ETH_Avg_yesterday) / ETH_Avg_yesterday)
mean(ETH_daily_return_3)
DASH_3N <- DASH.charts %>% filter(date > as.Date("2017-11-30") & date < as.Date("2022-09-02"))
N3 <- nrow(DASH_3N)
DASH_Avg <- data.frame(Average = (DASH_3N$high - DASH_3N$low) /2)
DASH_Avg_Today <-   DASH_Avg$Average[2:N3]
DASH_Avg_yesterday <- DASH_Avg$Average[1 : N3 - 1]
DASH_daily_return_3 <- ((DASH_Avg_Today - DASH_Avg_yesterday) / DASH_Avg_yesterday)
mean(DASH_daily_return_3)
PPC_3N <- PPC.charts %>% filter(date > as.Date("2017-11-30") & date < as.Date("2022-09-02"))
N3 <- nrow(PPC_3N)
PPC_Avg <- data.frame(Average = (PPC_3N$high - PPC_3N$low) /2)
PPC_Avg_Today <-   PPC_Avg$Average[2:N3]
PPC_Avg_yesterday <- PPC_Avg$Average[1 : N3 - 1]
PPC_daily_return_3 <- ((PPC_Avg_Today - PPC_Avg_yesterday) / PPC_Avg_yesterday)
mean(PPC_daily_return_3)
XLM_3N <- XLM.charts %>% filter(date > as.Date("2017-11-30") & date < as.Date("2022-09-02"))
N3 <- nrow(XLM_3N)
XLM_Avg <- data.frame(Average = (XLM_3N$high - XLM_3N$low) /2)
XLM_Avg_Today <-   XLM_Avg$Average[2:N3]
XLM_Avg_yesterday <- XLM_Avg$Average[1 : N3 - 1]
XLM_daily_return_3 <- ((XLM_Avg_Today - XLM_Avg_yesterday) / XLM_Avg_yesterday)
mean(XLM_daily_return_3)
P3_3_Avg <- data.frame(Average = ETH_Avg + DASH_Avg + PPC_Avg + XLM_Avg)
P3_3_Today <-   P3_3_Avg$Average[2:N3]
P3_3_yesterday <- P3_3_Avg$Average[1 : N3 - 1]
P3_3_ROI <- ((P3_3_Today - P3_3_yesterday) / P3_3_yesterday)
mean(P3_3_ROI)
jk <- seq(100,10000000,by = 100)
jk5D <- function(jk)
{
draw_time_year_2 <-  (60*60*24*365)/3
ticket_prob_4 <- jk / 20000000000
#N = rounds * T = prob
ff <- draw_time_year_2 * ticket_prob_4 * 250
return(ff)
}
h5D <- sapply(jk, jk5D)*250
raffle_data_2 <- data.frame(raffle_tix = jk ,  amount_won= h5D )
View(raffle_data_2)
View(raffle_data_2)
jk <- seq(100,10000000,by = 100)
jk5D <- function(jk)
{
draw_time_year_2 <-  (60*60*24*365)/3
ticket_prob_4 <- jk / 20000000000
#N = rounds * T = prob
ff <- draw_time_year_2 * ticket_prob_4 * 250
return(ff)
}
h5D <- sapply(jk, jk5D)
raffle_data_2 <- data.frame(raffle_tix = jk ,  amount_won= h5D )
View(raffle_data_2)
calc_3_sd <-  function(price)
{
prob_3 <-  1-(price/10)
pp <- rbinom(1000000,50,prob_3)
cc <- sd(pp)
print(cc)
}
#3b
price_3b = 2.00
answer_3b <-  1-(2/10)
print(answer_3b)
make_num_cus <-  answer_3b * 50
print(make_num_cus)
#3c
price_3c = 2.00
r3c <- calc_3_sd(2.00)
r3e <- calc_3_sd(4.00)
jk <- seq(100,10000000,by = 100)
jk5D <- function(jk)
{
draw_time_year_2 <-  (60*60*24*365)/3
ticket_prob_4 <- jk / 20000000000
#N = rounds * T = prob
ff <- draw_time_year_2 * ticket_prob_4 * 250
return(ff)
}
h5D <- sapply(jk, jk5D)
raffle_data_2 <- data.frame(raffle_tix = jk ,  amount_won= h5D )
library(ggplot2)
setwd("L:/UofC/Fall 2022/BTMA 636 - Data Analytics 1/Repo/DataAnalytics1/DA1_HW3")
x = 0.2/2.5
qnorm((1-x), 120, 25)
library(rvest)
library(dplyr)
library(gtools)
library(ggplot2)
nMuffin <- 1
muffin_Cost_1a <- 0.20
muffin_Sell_Price_1a  <- 2.50
muffin_Mean_1a  <- 120
muffin_Std_1a  <- 25
muffin_Stats_1a  <- rnorm(n = nMuffin, mean = muffin_Mean_1a, sd = muffin_Std_1a)
Muffin_1a_demand <- 120
Muffin_1a_stock <- 100
muffin_Daily_Report <-  function(muffin_demand, muffin_stock, muffin_cost, muffin_price)
{
if(muffin_demand < muffin_stock)
{
leftOvers <-  muffin_stock - muffin_demand
Daily_Sales <-  muffin_demand * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Waste_Cost <-  leftOvers * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Todays daily stock was ", muffin_stock, " and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit, " but since supply was more than demand, there were ", leftOvers,
" left over, which came to a loss of ", Waste_Cost)
print(Sales_Report)
}
if(muffin_demand > muffin_stock)
{
Daily_Sales <-  muffin_stock * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Todays daily stock was ", muffin_stock, " and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit)
print(Sales_Report)
}
if(muffin_demand == muffin_stock)
{
Daily_Sales <-  muffin_demand * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Today was a good day, the demand was perfect to the supply and the daily stock was ", muffin_stock,
" and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit)
print(Sales_Report)
}
muffin_Daily_Report(120,100,0.20,2.50)
Muffin_1a_demand <- 120
Muffin_1a_stock <- 100
muffin_Daily_Report <-  function(muffin_demand, muffin_stock, muffin_cost, muffin_price)
{
if(muffin_demand < muffin_stock)
{
leftOvers <-  muffin_stock - muffin_demand
Daily_Sales <-  muffin_demand * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Waste_Cost <-  leftOvers * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Todays daily stock was ", muffin_stock, " and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit, " but since supply was more than demand, there were ", leftOvers,
" left over, which came to a loss of ", Waste_Cost)
print(Sales_Report)
}
if(muffin_demand > muffin_stock)
{
Daily_Sales <-  muffin_stock * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Todays daily stock was ", muffin_stock, " and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit)
print(Sales_Report)
}
if(muffin_demand == muffin_stock)
{
Daily_Sales <-  muffin_demand * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Today was a good day, the demand was perfect to the supply and the daily stock was ", muffin_stock,
" and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit)
print(Sales_Report)
}
}
muffin_Daily_Report(120,100,0.20,2.50)
library(rvest)
library(dplyr)
library(gtools)
library(ggplot2)
nMuffin <- 1
muffin_Cost_1a <- 0.20
muffin_Sell_Price_1a  <- 2.50
muffin_Mean_1a  <- 120
muffin_Std_1a  <- 25
muffin_Stats_1a  <- rnorm(n = nMuffin, mean = muffin_Mean_1a, sd = muffin_Std_1a)
Muffin_1a_demand <- 120
Muffin_1a_stock <- 100
muffin_Daily_Report <-  function(muffin_demand, muffin_stock, muffin_cost, muffin_price)
{
if(muffin_demand < muffin_stock)
{
leftOvers <-  muffin_stock - muffin_demand
Daily_Sales <-  muffin_demand * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Waste_Cost <-  leftOvers * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Todays daily stock was ", muffin_stock, " and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit, " but since supply was more than demand, there were ", leftOvers,
" left over, which came to a loss of ", Waste_Cost)
print(Sales_Report)
}
if(muffin_demand > muffin_stock)
{
Daily_Sales <-  muffin_stock * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Todays daily stock was ", muffin_stock, " and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit)
print(Sales_Report)
}
if(muffin_demand == muffin_stock)
{
Daily_Sales <-  muffin_demand * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Today was a good day, the demand was perfect to the supply and the daily stock was ", muffin_stock,
" and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit)
print(Sales_Report)
}
}
muffin_Daily_Report(120,100,0.20,2.50)
muffin_Daily_Report(80,100,0.2,2.50)
Muffin_1a_demand <- 120
Muffin_1a_stock <- 100
muffin_Daily_Report <-  function(muffin_demand, muffin_stock, muffin_cost, muffin_price)
{
if(muffin_demand < muffin_stock)
{
leftOvers <-  muffin_stock - muffin_demand
Daily_Sales <-  muffin_demand * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Waste_Cost <-  leftOvers * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Todays daily stock was ", muffin_stock, " and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit, " but since supply was more than demand, there were ", leftOvers,
" left over, which came to a loss of ", Waste_Cost)
print(Sales_Report)
return(Sales_Report)
}
if(muffin_demand > muffin_stock)
{
Daily_Sales <-  muffin_stock * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Todays daily stock was ", muffin_stock, " and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit)
print(Sales_Report)
return(Sales_Report)
}
if(muffin_demand == muffin_stock)
{
Daily_Sales <-  muffin_demand * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Today was a good day, the demand was perfect to the supply and the daily stock was ", muffin_stock,
" and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit)
print(Sales_Report)
return(Sales_Report)
}
}
muffin_Daily_Report(120,100,0.20,2.50)
muffin_Daily_Report(120,100,0.20,2.50)
muffin_Daily_Report(80,100,0.2,2.50)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("rvest")
install.packages("gtools")
library(rvest)
library(dplyr)
library(gtools)
library(ggplot2)
nMuffin <- 1
muffin_Cost_1a <- 0.20
muffin_Sell_Price_1a  <- 2.50
muffin_Mean_1a  <- 120
muffin_Std_1a  <- 25
muffin_Stats_1a  <- rnorm(n = nMuffin, mean = muffin_Mean_1a, sd = muffin_Std_1a)
#1a
Muffin_1a_demand <- 120
Muffin_1a_stock <- 100
muffin_Daily_Report <-  function(muffin_demand, muffin_stock, muffin_cost, muffin_price)
{
if(muffin_demand < muffin_stock)
{
leftOvers <-  muffin_stock - muffin_demand
Daily_Sales <-  muffin_demand * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Waste_Cost <-  leftOvers * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Todays daily stock was ", muffin_stock, " and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit, " but since supply was more than demand, there were ", leftOvers,
" left over, which came to a loss of ", Waste_Cost)
print(Sales_Report)
return(Sales_Report)
}
if(muffin_demand > muffin_stock)
{
Daily_Sales <-  muffin_stock * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Todays daily stock was ", muffin_stock, " and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit)
print(Sales_Report)
return(Sales_Report)
}
if(muffin_demand == muffin_stock)
{
Daily_Sales <-  muffin_demand * muffin_price
Daily_Cost <-  muffin_stock * muffin_cost
Daily_Profit <-  Daily_Sales - Daily_Cost
Sales_Report <- paste0("Today was a good day, the demand was perfect to the supply and the daily stock was ", muffin_stock,
" and the demand was ", muffin_demand,
" each muffin was sold for $", muffin_price, " at a cost of $", muffin_cost, " this puts the total cost to $", Daily_Cost,
" and total sales to $", Daily_Sales,
" this means the profit for today was $", Daily_Profit)
print(Sales_Report)
return(Sales_Report)
}
}
#muffin_Daily_Report(Muffin_1a_demand, Muffin_1a_stock, muffin_Cost_1a, muffin_Sell_Price_1a)
#1a
#If the demand tomorrow is 120 and only 100 muffins were stocked, then muffins are understocked.
#What would be the profit if only 100 muffins were stocked
muffin_Daily_Report(120,100,0.20,2.50)
