N4D <- 1:1001
oneMilN <- 1000000
loss_vector <- numeric(0)
HwQ4File <- HW2Q4 #file loaded into data frame
Q4F <- function(player_num)
{
loss_vector_4f <- numeric(0)
#get all the values from 0:1000 and then random generate the values from the pool of OneMilN
random_generator_4D <- sample(player_num, oneMilN, TRUE)
for (i  in 1:length(N4D) )
{
mean_guess <- mean(random_generator_4D)
difference_calc <- abs(mean_guess - i)**2
loss_vector_4f = append(loss_vector_4f, difference_calc)
}
final_min <- which.min(loss_vector_4f)
print(final_min)
return(final_min)
}
I_am_Over_This <-  Q4F(HwQ4File)
print(I_am_Over_This)
####################################################################################################
####################################################################################################
######################################## DEAD CODE #################################################
Q4F <- function(player_num)
{
loss_vector_4f <- numeric(0)
#get all the values from 0:1000 and then random generate the values from the pool of OneMilN
random_generator_4D <- sample(player_num, oneMilN, TRUE)
for (i  in 1:length(N4D) )
{
mean_guess <- mean(random_generator_4D)
difference_calc <- abs(mean_guess - i)**2
loss_vector_4f = append(loss_vector_4f, difference_calc)
}
final_min <- min(loss_vector_4f)
print(final_min)
return(final_min)
}
I_am_Over_This <-  Q4F(HwQ4File)
print(I_am_Over_This)
Q4F <- function(player_num)
{
loss_vector_4f <- numeric(0)
#get all the values from 0:1000 and then random generate the values from the pool of OneMilN
random_generator_4D <- sample(player_num, oneMilN, TRUE)
for (i  in 1:length(N4D) )
{
mean_guess <- mean(random_generator_4D)
print(mean_guess)
difference_calc <- abs(mean_guess - i)**2
loss_vector_4f = append(loss_vector_4f, difference_calc)
}
final_min <- min(loss_vector_4f)
print(final_min)
return(final_min)
}
I_am_Over_This <-  Q4F(HwQ4File)
Q4F <- function(player_num)
{
loss_vector_4f <- numeric(0)
#get all the values from 0:1000 and then random generate the values from the pool of OneMilN
random_generator_4D <- sample(player_num, oneMilN, TRUE)
for (i  in 1:length(N4D) )
{
mean_guess <- mean(random_generator_4D)
#print(mean_guess)
difference_calc <- abs(mean_guess - i)**2
loss_vector_4f = append(loss_vector_4f, difference_calc)
}
final_min <- min(loss_vector_4f)
print(final_min)
return(final_min)
}
I_am_Over_This <-  Q4F(HwQ4File)
print(I_am_Over_This)
####################################################################################################
####################################################################################################
######################################## DEAD CODE #################################################
Q4F <- function(player_num)
{
loss_vector_4f <- numeric(0)
#get all the values from 0:1000 and then random generate the values from the pool of OneMilN
random_generator_4D <- sample(player_num, oneMilN, TRUE)
for (i  in 1:length(player_num) )
{
mean_guess <- mean(random_generator_4D)
#print(mean_guess)
difference_calc <- abs(mean_guess - i)**2
loss_vector_4f = append(loss_vector_4f, difference_calc)
}
final_min <- min(loss_vector_4f)
print(final_min)
return(final_min)
}
I_am_Over_This <-  Q4F(HwQ4File)
print(I_am_Over_This)
Q4F <- function(player_num)
{
loss_vector_4f <- numeric(0)
storage_df_1 <-  data.frame()
#get all the values from 0:1000 and then random generate the values from the pool of OneMilN
random_generator_4f <- sample(player_num, oneMilN, TRUE)
for (i  in 1:length(player_num) )
{
mean_guess <- mean(random_generator_4f)
#print(mean_guess)
difference_calc <- abs(mean_guess - i)**2
loss_vector_4f = append(loss_vector_4f, difference_calc)
storage_df <- data.frame(vectorFile = player_num[i], Expected_Loss = loss_vector_4f)
storage_df_1 <- bind_rows(storage_df_1, storage_df)
}
final_min <- which.min(storage_df_1)
print(final_min)
return(final_min)
}
I_am_Over_This <-  Q4F(HwQ4File)
print(I_am_Over_This)
player_guess_30 = 30
player_guess_450 = 450
player_choice_500 = 500
player_guess_950 = 950
N <- 1000
N4D <- 1:1001
oneMilN <- 1000000
loss_vector <- numeric(0)
HwQ4File <- HW2Q4 #file loaded into data frame
Q4F <- function(player_num)
{
loss_vector_4f <- numeric(0)
storage_df_1 <-  data.frame()
#get all the values from 0:1000 and then random generate the values from the pool of OneMilN
random_generator_4f <- sample(player_num, oneMilN, TRUE)
for (i  in 1:length(player_num) )
{
mean_guess <- mean(random_generator_4f)
#print(mean_guess)
difference_calc <- abs(mean_guess - i)**2
loss_vector_4f = append(loss_vector_4f, difference_calc)
storage_df <- data.frame(vectorFile = player_num[i], Expected_Loss = loss_vector_4f)
storage_df_1 <- bind_rows(storage_df_1, storage_df)
}
final_min <- storage_df_1$vectorFile[which.min(storage_df_1$Expected_Loss)]
print(final_min)
return(final_min)
}
I_am_Over_This <-  Q4F(HwQ4File)
class_roster <- data.frame(read.csv("BTMA 636 - 797 (Fall 2022).csv"))
print(class_roster)
class_roster <- tibble::rowid_to_column(class_roster,"Student_ID")
class_roster <- class_roster %>% unite('Full_Name', First.Name:Last.Name, remove = FALSE)
numbers_used_Q3 <- 1:nrow(class_roster)
print(class_roster)
print(numbers_used_Q3)
Projects_Assignments = data.frame(Marker_ID = 1:nrow(class_roster),
Project_Student_ID_1 = c(nrow(class_roster), 1:(nrow(class_roster)-1)),
Project_Student_ID_2 = c((nrow(class_roster)-1):nrow(class_roster), 1:(nrow(class_roster)-2)),
Project_Student_ID_3 = c((nrow(class_roster)-2):nrow(class_roster), 1:(nrow(class_roster)-3)))
View(Projects_Assignments)
class_roster <- data.frame(read.csv("BTMA 636 - 797 (Fall 2022).csv"))
print(class_roster)
class_roster <- tibble::rowid_to_column(class_roster,"Student_ID")
class_roster <- class_roster %>% unite('Full_Name', First.Name:Last.Name, remove = FALSE)
numbers_used_Q3 <- 1:nrow(class_roster)
print(class_roster)
print(numbers_used_Q3)
full_name_df <- data.frame()
View(class_roster)
fullName_df <- bind_rows(fullName_df, fullName_df_temp)
class_roster <- data.frame(read.csv("BTMA 636 - 797 (Fall 2022).csv"))
print(class_roster)
class_roster <- tibble::rowid_to_column(class_roster,"Student_ID")
class_roster <- class_roster %>% unite('Full_Name', First.Name:Last.Name, remove = FALSE)
numbers_used_Q3 <- 1:nrow(class_roster)
print(class_roster)
print(numbers_used_Q3)
full_name_df <- data.frame()
Projects_Assignments = data.frame(Marker_ID = 1:nrow(class_roster),
Project_Student_ID_1 = c(nrow(class_roster), 1:(nrow(class_roster)-1)),
Project_Student_ID_2 = c((nrow(class_roster)-1):nrow(class_roster), 1:(nrow(class_roster)-2)),
Project_Student_ID_3 = c((nrow(class_roster)-2):nrow(class_roster), 1:(nrow(class_roster)-3)))
for (i  in 1:length(Projects_Assignments))
{
fullName_df_temp <- data.frame(Marker_Name = class_roster$Full_Name[Projects_Assignments[i]], Project_Name_1 = class_roster$Full_Name[Projects_Assignments[i]],Project_Name_2 = class_roster$Full_Name[Projects_Assignments[i]], Project_Name_3 = class_roster$Full_Name[Projects_Assignments[i]])
fullName_df <- bind_rows(fullName_df, fullName_df_temp)
}
View(class_roster)
class_roster <- data.frame(read.csv("BTMA 636 - 797 (Fall 2022).csv"))
print(class_roster)
class_roster <- tibble::rowid_to_column(class_roster,"Student_ID")
class_roster <- class_roster %>% unite('Full_Name', First.Name:Last.Name, remove = FALSE)
numbers_used_Q3 <- 1:nrow(class_roster)
print(class_roster)
print(numbers_used_Q3)
full_name_df <- data.frame()
Projects_Assignments = data.frame(Marker_ID = 1:nrow(class_roster),
Project_Student_ID_1 = c(nrow(class_roster), 1:(nrow(class_roster)-1)),
Project_Student_ID_2 = c((nrow(class_roster)-1):nrow(class_roster), 1:(nrow(class_roster)-2)),
Project_Student_ID_3 = c((nrow(class_roster)-2):nrow(class_roster), 1:(nrow(class_roster)-3)))
for (i  in 1:length(Projects_Assignments))
{
fullName_df_temp <- data.frame(Marker_Name = class_roster$Full_Name[Projects_Assignments$Marker_ID[i]], Project_Name_1 = class_roster$Full_Name[Projects_Assignments$Project_Student_ID_1[i]],Project_Name_2 = class_roster$Full_Name[Projects_Assignments$Project_Student_ID_2[i]], Project_Name_3 = class_roster$Full_Name[Projects_Assignments$Project_Student_ID_3[i]])
fullName_df <- bind_rows(fullName_df, fullName_df_temp)
}
class_roster <- data.frame(read.csv("BTMA 636 - 797 (Fall 2022).csv"))
print(class_roster)
class_roster <- tibble::rowid_to_column(class_roster,"Student_ID")
class_roster <- class_roster %>% unite('Full_Name', First.Name:Last.Name, remove = FALSE)
numbers_used_Q3 <- 1:nrow(class_roster)
print(class_roster)
print(numbers_used_Q3)
fullName_df <- data.frame()
Projects_Assignments = data.frame(Marker_ID = 1:nrow(class_roster),
Project_Student_ID_1 = c(nrow(class_roster), 1:(nrow(class_roster)-1)),
Project_Student_ID_2 = c((nrow(class_roster)-1):nrow(class_roster), 1:(nrow(class_roster)-2)),
Project_Student_ID_3 = c((nrow(class_roster)-2):nrow(class_roster), 1:(nrow(class_roster)-3)))
for (i  in 1:length(Projects_Assignments))
{
fullName_df_temp <- data.frame(Marker_Name = class_roster$Full_Name[Projects_Assignments$Marker_ID[i]], Project_Name_1 = class_roster$Full_Name[Projects_Assignments$Project_Student_ID_1[i]],Project_Name_2 = class_roster$Full_Name[Projects_Assignments$Project_Student_ID_2[i]], Project_Name_3 = class_roster$Full_Name[Projects_Assignments$Project_Student_ID_3[i]])
fullName_df <- bind_rows(fullName_df, fullName_df_temp)
}
View(fullName_df)
View(full_name_df)
View(fullName_df)
View(Projects_Assignments)
exam_body <- EX4DF
exam_body$P <- NA
exam_body$B <- NA
exam_body$Total <- NA
for (p  in seq(from=0, to=100, by=2))
{
for (b  in seq(from=0, to=100, by=2) )
{
if(p+b <60)
{
print(1+1+p)
}
}
}
#check the mean score is greater than 75 and less than 70
#P and B assume 30 each from examples
if(mean(EX4DF) < 75)
{
for (pChecker  in 1:30 )
{
#both p and b need to be multiples of 2
pValue = pChecker *2
for (bChecker  in 1:30 )
{
bValue <- bChecker *2
if(pValue + bValue < 60)
{
Grade_Estimator(bChecker, pValue, bValue)
#end IF
}
}
}
} #end IF
mean_exam <- mean(EX4DF)
View(EX1DF)
if(mean(EX4DF$exam_scores4) < 75)
{
for (pChecker  in 1:30 )
{
#both p and b need to be multiples of 2
pValue = pChecker *2
for (bChecker  in 1:30 )
{
bValue <- bChecker *2
if(pValue + bValue < 60)
{
Grade_Estimator(bChecker, pValue, bValue)
#end IF
}
}
}
} #end IF
library('ggplot2')
library('tidyr')
library('dplyr')
load("exam_scores1.rda")
load("exam_scores2.rda")
load("exam_scores3.rda")
load("exam_scores4.rda")
load("exam_scores5.rda")
load("HW2Q4.Rdata")
read.csv("BTMA 636 - 797 (Fall 2022).csv")
EX1DF <-  data.frame(exam_scores1)
EX2DF <-  data.frame(exam_scores2)
EX3DF <-  data.frame(exam_scores3)
EX4DF <-  data.frame(exam_scores4)
EX5DF <-  data.frame(exam_scores5)
average_of_exam <-  mean(EX5DF$exam_scores5)
print(average_of_exam)
rows_of_scores = nrow(EX1DF) #all are 30 so it doesn't matter which exam is used.
counter = 0;
master_Data_Frame <-  data.frame(MeanEx = numeric(0), StdDiv = numeric(0), P_value = numeric(0), B_value = numeric(0), SB_Total = numeric(0))
# P and B need to be multiples of 2 easiest way is to just increments by 2, or could % 2 from top down but too much work
#Going on assumption of P and B are both native 30 since all other questions used that number. Nothing else was specified
#src https://stat.ethz.ch/pipermail/r-help/2008-July/168753.html
#exam scores = S, read about part for S+B
exam_body <- EX4DF
exam_body$P <- NA
exam_body$B <- NA
exam_body$Total <- NA
#This function answers questions 1-3,5,6,7 of Q1
Grade_Analyzer <- function(S, R, P, B)
{
PB <- P+B
SB <- S+B
if(S < P)
{
print("The highest possible score you can get is P + B:")
print(PB)
if(R == PB)
{
new_score <-  PB
print("score 1")
return(new_score)
}
else if(R < PB)
{
print("score 2")
return(R)
} #END ELSE IF
else if(R > PB)
{
print("score 3")
return(PB)
}#end Else IF
else
{
print("score 4")
return(R)
}#End Else
} #end IF
if(S == P)
{
if(R == SB)
{
print("score 5")
return(SB)
}  #end IF
else
{
print("score 6")
return(R)
#End Else
}
if(S > P)
{
print("score 7")
return(S)
#end IF
}
}  #end IF
}#End Function
Grade_Estimator <- function(S,P,B)
{
max_score <- P + B
if(S < P )
{
return(max_score)
}    #end IF
else if(S == P)
{
SB_max_score <- S+B
return(SB_max_score)
}#end Else IF
}#End Function
if(mean(EX4DF$exam_scores4) < 75)
{
for (pChecker  in 1:30 )
{
#both p and b need to be multiples of 2
pValue = pChecker *2
for (bChecker  in 1:30 )
{
bValue <- bChecker *2
if(pValue + bValue < 60)
{
Grade_Estimator(bChecker, pValue, bValue)
#end IF
}
}
}
} #end IF
if(mean(EX4DF$exam_scores4) < 75)
{
for (pChecker  in 1:30 )
{
#both p and b need to be multiples of 2
pValue = pChecker *2
for (bChecker  in 1:30 )
{
bValue <- bChecker *2
if(pValue + bValue < 60)
{
Q1B_DF <- data.frame(Col1 = Grade_Estimator(bChecker, pValue, bValue))
#end IF
}
}
}
} #end IF
View(Q1B_DF)
Q1B_DF <- data.frame()
if(mean(EX4DF$exam_scores4) < 75)
{
for (pChecker  in 1:30 )
{
#both p and b need to be multiples of 2
pValue = pChecker *2
for (bChecker  in 1:30 )
{
bValue <- bChecker *2
if(pValue + bValue < 60)
{
Q1B_DF_1 <- data.frame(Col1 = Grade_Estimator(bChecker, pValue, bValue))
Q1B_DF <- bind_rows(Q1B_DF, Q1B_DF_1)
#end IF
}
}
}
} #end IF
View(Q1B_DF)
View(EX2DF)
#Q1B
#check the mean score is greater than 75 and less than 70
#P and B assume 30 each from examples
Q1B_DF <- data.frame()
pb_DF <-  data.frame(PValue = numeric(), BValue = numeric(),MeanScore = numeric(), StdScore = numeric())
if(mean(EX4DF$exam_scores4) < 75)
{
for (pChecker  in 1:30 )
{
#both p and b need to be multiples of 2
pValue = pChecker *2
for (bChecker  in 1:30 )
{
bValue <- bChecker *2
if(pValue + bValue < 60)
{
Q1B_DF_1 <- data.frame(Col1 = Grade_Estimator(bChecker, pValue, bValue))
Q1B_DF <- bind_rows(Q1B_DF, Q1B_DF_1)
#end IF
}
if(Q1B_DF$Col1[i] > 70 & Q1B_DF$Col1[i] < 75)
{
pb_DF <- bind_rows(PValue = pValue, BValue = bValue, MeanScore = mean(Q1B_DF), StdScore = std(Q1B_DF))
}#end IF
}
}
} #end IF
#check the mean score is greater than 75 and less than 70
#P and B assume 30 each from examples
Q1B_DF <- data.frame()
pb_DF <-  data.frame(PValue = numeric(), BValue = numeric(),MeanScore = numeric(), StdScore = numeric())
if(mean(EX4DF$exam_scores4) < 75)
{
for (pChecker  in 1:30 )
{
#both p and b need to be multiples of 2
pValue = pChecker *2
for (bChecker  in 1:30 )
{
bValue <- bChecker *2
if(pValue + bValue < 60)
{
Q1B_DF_1 <- data.frame(Col1 = Grade_Estimator(bChecker, pValue, bValue))
Q1B_DF <- bind_rows(Q1B_DF, Q1B_DF_1)
#end IF
}
if(Q1B_DF$Col1[i] > 70 & Q1B_DF$Col1[i] < 75)
{
pb_DF <- bind_rows(PValue = pValue, BValue = bValue, MeanScore = mean(Q1B_DF$Col1), StdScore = std(Q1B_DF$Col1))
}#end IF
}
}
} #end IF
View(pb_DF)
View(Q1B_DF)
Q1B_DF <- data.frame()
pb_DF <-  data.frame(PValue = numeric(), BValue = numeric(),MeanScore = numeric(), StdScore = numeric())
if(mean(EX4DF$exam_scores4) < 75)
{
for (pChecker  in 1:30 )
{
#both p and b need to be multiples of 2
pValue = pChecker *2
for (bChecker  in 1:30 )
{
bValue <- bChecker *2
if(pValue + bValue < 60)
{
Q1B_DF_1 <- data.frame(Col1 = Grade_Estimator(bChecker, pValue, bValue))
Q1B_DF <- bind_rows(Q1B_DF, Q1B_DF_1)
#end IF
}
# if(Q1B_DF$Col1[i] > 70 & Q1B_DF$Col1[i] < 75)
# {
#   pb_DF <- bind_rows(PValue = pValue, BValue = bValue, MeanScore = mean(Q1B_DF$Col1), StdScore = std(Q1B_DF$Col1))
#
#
#
# }#end IF
}
}
} #end IF
View(Q1B_DF)
#end IF
}
if(Q1B_DF$Col1[i] > 70 & Q1B_DF$Col1[i] < 75)
